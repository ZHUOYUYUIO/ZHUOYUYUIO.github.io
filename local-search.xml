<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mesa-geo introduction</title>
    <link href="/2024/11/12/mesa-geo-introduction/"/>
    <url>/2024/11/12/mesa-geo-introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="this-is-a-study-share-or-tutorial-for-mesa-geo-study-beginner"><a href="#this-is-a-study-share-or-tutorial-for-mesa-geo-study-beginner" class="headerlink" title="this is a study share or tutorial for mesa-geo study beginner"></a>this is a study share or tutorial for mesa-geo study beginner</h1><h2 id="an-interesting-metaphor"><a href="#an-interesting-metaphor" class="headerlink" title="an interesting metaphor:"></a>an interesting metaphor:</h2><p><img src="/image/bg/blog1.png"><br> （You’re Under Arrest!——anime） Natsumi is a female police officer with short hair, while Miyuki is a female police officer who is driving. They are traffic police officers and spend most of their time executing tasks together, with a smaller portion of time spent separately.</p><p>When executing tasks separately, Miyuki’s greetings to Natsumi:</p><ul><li>Moshi moshi!</li><li>Natsumi, which district of Tokyo are you in now? Are you still on duty there? How far is it from where you are to the Motodome Police Station? What are you planning to do after your shift? Are you heading back to Motodome?</li></ul><p>At this moment, Tokyo is the city where Natsumi and Miyuki are located, but they are in different areas, which can be regarded as neighborhood agents or region agents.</p><p>When we consider Natsumi as a person agent, her name “Natsumi” is actually a unique ID.</p><p>“What are you planning to do after your shift?” can actually be seen as what the next step is, or simply “step”.</p><p>The interaction between Natsumi, Miyuki, and the city constitutes the model among agents. We need to place them and the city into both spatial and temporal sequences.</p><h2 id="1-introduction-of-mesa-geo-package"><a href="#1-introduction-of-mesa-geo-package" class="headerlink" title="1.introduction of mesa-geo package"></a>1.introduction of mesa-geo package</h2><ul><li>with mesa-geo, we can build build a geosapce which can <strong>contain</strong> or support <strong>gis Agents</strong></li><li>Compared to traditional Agents, geoAgents have more <strong>geometry attributes</strong>: shapely, <strong>CRS</strong> coordinate system…</li></ul><p>the geo_data mesa-geo use:</p><ul><li>we can directly use shapely package to create a geometry object <strong>on our own</strong>.</li><li>we can also import existing geometric objects -&gt; vector data: shp, geojson, geodataframe.</li></ul><p>for example:</p><ul><li>Use the point function from the shapely package to generate corresponding coordinate points for the person agent.</li><li>Directly import the regional data of any place.</li></ul><h2 id="2-the-existing-geometric-data-which-can-be-used-by-mesa-geo"><a href="#2-the-existing-geometric-data-which-can-be-used-by-mesa-geo" class="headerlink" title="2.the existing geometric data which can be used by mesa-geo"></a>2.the existing geometric data which can be used by mesa-geo</h2><h3 id="raster-data"><a href="#raster-data" class="headerlink" title="raster data"></a>raster data</h3><ul><li>Divided into a grid and segmented into individual pixels, which ensures a uniform format and facilitates uniform operations.</li><li>Detailed representation of various features, resulting in large data volumes.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> rasterio  <br><span class="hljs-comment">#open the rasterio  </span><br>ds=rasterio.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;\...\...tif&#x27;</span>) <br></code></pre></td></tr></table></figure><h3 id="vector-data"><a href="#vector-data" class="headerlink" title="vector data"></a>vector data</h3><ul><li>Only stores geographic objects such as points, point lists, and related features, resulting in smaller data volumes.</li><li>Accurately represents point-line-plane elements.</li><li>Facilitates modification and editing.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> geopandas <span class="hljs-keyword">as</span> gpd  <br>gdf = gpd.read_file(<span class="hljs-string">&#x27;\...\...\...shp&#x27;</span>) <br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment"># read the geojson data</span><br>file_path = <span class="hljs-string">&#x27;\...geojson&#x27;</span><br>file_path = <span class="hljs-string">&quot;\...\....geojson&quot;</span><br>gdf_0 = gpd.read_file(file_path)<br><br><span class="hljs-comment"># draw the map</span><br>fig, ax = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br>gdf_0.plot(ax=ax, alpha=<span class="hljs-number">0.5</span>, edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>)<br>ax.set_title(<span class="hljs-string">&#x27;regions&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&#x27;Longitude&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;Latitude&#x27;</span>)<br><br><span class="hljs-comment"># show the map</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-what-is-GeoAgent-how-to-use-the-geo-data"><a href="#3-what-is-GeoAgent-how-to-use-the-geo-data" class="headerlink" title="3.what is GeoAgent?&#x2F;how to use the geo_data?"></a>3.what is GeoAgent?&#x2F;how to use the geo_data?</h2><p>what can be done with these geo_data in mesa-geo?</p><p>put the GeoAgents <strong>into the geospace</strong>! this geo_data are the location where agents are. </p><p>however, before we put the GeoAgent into the geospace, let’s figure it out what is GeoAgent.</p><h3 id="GeoAgent"><a href="#GeoAgent" class="headerlink" title="GeoAgent:"></a>GeoAgent:</h3><p>GeoAgent has different kinds of attributes: unique_id, model where the agents are put, geometry, crs</p><p>GeoAgent <strong>can be</strong> buildings, people and others all you hope they have locations in your simulation process.</p><p>GeoAgent can move or change state which are set as rules function</p><p>GeoAgent will have a string of actions as time goes, so agents have step()function </p><h3 id="set-GeoAgent-Class-set-attributes-properties-and-rules-of-agents-action"><a href="#set-GeoAgent-Class-set-attributes-properties-and-rules-of-agents-action" class="headerlink" title="set GeoAgent Class: set attributes(properties) and rules of agents action"></a>set GeoAgent Class: set attributes(properties) and rules of agents action</h3><p>what do attributes, rules fuction and step fuction look like?</p><ul><li>attributes and basic variables</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">regionAgent</span>(mg.GeoAgent):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, unique_id, model, geometry, crs,agent_type =<span class="hljs-string">&quot;no_war&quot;</span>,war_infection_risk=<span class="hljs-number">0.1</span> ,war_recovery_rate=<span class="hljs-number">0.2</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(unique_id, model, geometry, crs)<br>        <span class="hljs-variable language_">self</span>.atype= agent_type<br>        <span class="hljs-variable language_">self</span>.war_infection_risk=war_infection_risk<br>        <span class="hljs-variable language_">self</span>.war_revovery_rate=war_recovery_rate<br>        <span class="hljs-variable language_">self</span>.in_war_step=<span class="hljs-number">0</span><br>    <span class="hljs-comment">#(p.s.this is from my war spread abm model created by myself, and I will introduce it clearly later)</span><br></code></pre></td></tr></table></figure><ul><li>move function</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_point</span>(<span class="hljs-params">self, dx, dy</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Move a point by creating a new one</span><br><span class="hljs-string">        :param dx:  Distance to move in x-axis</span><br><span class="hljs-string">        :param dy:  Distance to move in y-axis</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> Point(<span class="hljs-variable language_">self</span>.geometry.x + dx, <span class="hljs-variable language_">self</span>.geometry.y + dy)<br><span class="hljs-comment">#this is from official tutorial example</span><br><br></code></pre></td></tr></table></figure><ul><li>state change fuction</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_unhappy</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_red:<br>            <span class="hljs-keyword">return</span> (<br>                <span class="hljs-variable language_">self</span>.model.space.get_region_by_id(<span class="hljs-variable language_">self</span>.region_id).red_pct<br>                &lt; <span class="hljs-variable language_">self</span>.SIMILARITY_THRESHOLD<br>            )<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (<br>                <span class="hljs-number">1</span> - <span class="hljs-variable language_">self</span>.model.space.get_region_by_id(<span class="hljs-variable language_">self</span>.region_id).red_pct<br>            ) &lt; <span class="hljs-variable language_">self</span>.SIMILARITY_THRESHOLD<br><span class="hljs-comment">#this is from official tutorial example</span><br></code></pre></td></tr></table></figure><ul><li>step fuction: which can contains the move or state change rules directly or fuction indirectly.</li><li>which can also contains the time register(observer) function.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-variable language_">self</span>.war_spread()<br>    <span class="hljs-variable language_">self</span>.model.counts[<span class="hljs-variable language_">self</span>.atype] += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h3 id="Allocate-a-location-geographic-object-to-every-GeoAgent"><a href="#Allocate-a-location-geographic-object-to-every-GeoAgent" class="headerlink" title="Allocate a location(geographic object) to every GeoAgent:"></a>Allocate a location(geographic object) to every GeoAgent:</h3><p>what we should do next: is to instantiate the GeoAgent in our model</p><p>there are several ways:</p><ul><li>using the geo_file we methioned</li><li>using the geometry</li></ul><h4 id="using-geo-file"><a href="#using-geo-file" class="headerlink" title="using geo_file"></a>using geo_file</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ac=mg.AgentCreator(XXAgent, model=<span class="hljs-variable language_">self</span>)<br><br>instantiate_object = ac.from_file(<br>    <span class="hljs-variable language_">self</span>.XXdate,<br>    unique_id=<span class="hljs-string">&quot;name&quot;</span>,<br>    set_attributes=<span class="hljs-literal">True</span><br>)<br></code></pre></td></tr></table></figure><h4 id="using-the-geometry"><a href="#using-the-geometry" class="headerlink" title="using the geometry"></a>using the geometry</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">instantiate_object = mg.AgentCreator(<br>XXAgent,<br>model=<span class="hljs-variable language_">self</span>,<br>crs=<span class="hljs-variable language_">self</span>.space.crs,<br>agent_kwargs=&#123;&#125;<br>)<br><br>point<br>XXobject= unique_shelter.create_agent(<br>    point, <span class="hljs-string">&quot;xx&quot;</span> + <span class="hljs-built_in">str</span>(j),<br>)<br><br></code></pre></td></tr></table></figure><h4 id="put-the-GeoAgent-into-space"><a href="#put-the-GeoAgent-into-space" class="headerlink" title="put the GeoAgent into space"></a>put the GeoAgent into space</h4><p>this is very easy, just put every instantiate_object into the space. it’s OK!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-variable language_">self</span>.space.add_agents(instantiate_object)<br><br><br></code></pre></td></tr></table></figure><h2 id="4-the-time-and-space-in-mesa-geo"><a href="#4-the-time-and-space-in-mesa-geo" class="headerlink" title="4.the time and space in mesa-geo"></a>4.the time and space in mesa-geo</h2><h3 id="the-time-in-mesa-geo"><a href="#the-time-in-mesa-geo" class="headerlink" title="the time in mesa-geo"></a>the time in mesa-geo</h3><p>the time in mesa-geo is the same as mesa package</p><p>it is relevent to mesa.time this module, let’s go on!</p><ul><li>Core idea, simplified: First, line up the little ones, then let them slide down the slide one by one.</li><li>For each agent, set up a step() function, add the agent to the time series of the schedule, and finally, activate them all uniformly through schedule.step().</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> mesa<br><span class="hljs-keyword">import</span> mesa_geo <span class="hljs-keyword">as</span> mg<br><span class="hljs-comment">#??mesa.time #you can check it yourself</span><br><br></code></pre></td></tr></table></figure><p>the given example without considering spatial arrangement, but focusing only on the changes in steps:</p><p>I have set up a scenario where everyone initially stands in a single line. Each person will take one step forward in their next move. Where will they be after taking 10 steps?</p><p>here are some methods of sheldule of mesa:</p><ul><li>mesa.time.RandomActivation(self)</li><li>mesa.time.SimultaneousActivation(self)</li><li>mesa.time.BaseScheduler(self)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> mesa  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(mesa.Agent):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, unique_id: <span class="hljs-built_in">int</span>, model: <span class="hljs-string">&#x27;TestModel&#x27;</span></span>) -&gt; <span class="hljs-literal">None</span>:  <br>        <span class="hljs-built_in">super</span>().__init__(unique_id, model)  <br>        <span class="hljs-variable language_">self</span>.yuyu = <span class="hljs-variable language_">self</span>.random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>) <span class="hljs-comment">#为每一个agent随机分配一个位置</span><br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-variable language_">self</span>.yuyu = <span class="hljs-variable language_">self</span>.yuyu+<span class="hljs-number">1</span>  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.unique_id,<span class="hljs-variable language_">self</span>.yuyu)  <br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestModel</span>(mesa.Model):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">super</span>().__init__()  <br>        <span class="hljs-comment">#you can try different kinds of methods: just try it!</span><br>        <span class="hljs-variable language_">self</span>.schedule = mesa.time.RandomActivation(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-comment">#self.schedule = mesa.time.SimultaneousActivation(self)</span><br>        <span class="hljs-comment">#self.schedule = mesa.time.BaseScheduler(self)</span><br>        <span class="hljs-variable language_">self</span>.create_agents()  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_agents</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):  <br>            personagent = Person(unique_id=i, model=<span class="hljs-variable language_">self</span>)  <br>            <span class="hljs-variable language_">self</span>.schedule.add(personagent)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-variable language_">self</span>.schedule.step()  <br>   <br>model = TestModel()  <br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>): <span class="hljs-comment">#这里我们重复了十次，可以看到每个agent分别行动了10次 </span><br>    model.step()<br><br></code></pre></td></tr></table></figure><h3 id="the-space-in-mesa-geo"><a href="#the-space-in-mesa-geo" class="headerlink" title="the space in mesa-geo"></a>the space in mesa-geo</h3><p>we will use mg.geospace，and this module is created based on geobase</p><p>geospace: initiate the crs(coordinate system) and layers and so on</p><p>geospace fuction:</p><p>basic function：</p><ul><li>to_crs: you can change the crs of space, e.g. change the degree crs into m crs</li><li>agents(self)：Return a list of all agents in the Geospace(agents layer)</li><li>layers(self): Return a list of all layers in the Geospace.</li><li>total_bounds(self): Return the bounds of the GeoSpace in [min_x, min_y, max_x, max_y] format.</li><li><em>geo_interface</em>_(self)</li></ul><p>add or remove agents function：<br>when we want to move the agents, we can use this kind of function</p><ul><li>add_agents(self, agents)：add </li><li>remove_agent(self, agent):remove out</li></ul><p>search for specific agent：<br>when we design the state change fuction or move function, we can use them</p><ul><li>get_relation(self, agent, relation):</li><li>get_intersecting_agents</li><li>get_neighbors_within_distance</li></ul><p>describe the agent distance and relationships：</p><ul><li>agents_at(self, pos)</li><li>distance(self, agent_a, agent_b)</li><li>get_neighbors(self, agent)</li><li>get_agents_as_GeoDataFrame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#you can check this module yourself, believe in yourself!</span><br><span class="hljs-keyword">import</span> mesa_geo <span class="hljs-keyword">as</span> mg<br><span class="hljs-comment">#??mg.geospace</span><br><br></code></pre></td></tr></table></figure><h2 id="5-Model-the-part-bridge-agents-time-and-space"><a href="#5-Model-the-part-bridge-agents-time-and-space" class="headerlink" title="5.Model: the part bridge agents, time and space"></a>5.Model: the part bridge agents, time and space</h2><p>what you should do is: instantiate all of the GeoAgents and put them into step(time) scheldule and geospace.</p><p>and them, run your instantiate model, you can wait the agents ‘play with’ each other, it’s so fantastic!</p><h2 id="6-some-tricks"><a href="#6-some-tricks" class="headerlink" title="6.some tricks:"></a>6.some tricks:</h2><h3 id="When-we-need-to-set-up-transitions-between-different-states-for-an-agent"><a href="#When-we-need-to-set-up-transitions-between-different-states-for-an-agent" class="headerlink" title="When we need to set up transitions between different states for an agent:"></a>When we need to set up transitions between different states for an agent:</h3><ul><li>Using if-elif-else syntax can achieve this.</li><li>Setting thresholds and recorders for some states, allowing transitions when certain levels are reached.</li></ul><h3 id="I-want-to-express-in-code-how-to-randomly-generate-two-types-of-objects"><a href="#I-want-to-express-in-code-how-to-randomly-generate-two-types-of-objects" class="headerlink" title="I want to express in code how to randomly generate two types of objects:"></a>I want to express in code how to randomly generate two types of objects:</h3><ul><li>Set a threshold value at 0.5 (or other values).</li><li>Assign a random number to a specific object and check if this random number is greater than or less than the threshold of 0.5 to naturally categorize it.</li><li>For example: is_red &#x3D; random.random() &lt; self.red_percentage.</li></ul><h3 id="To-implement-a-person’s-movement-within-a-circular-area-centered-on-themselves-with-a-radius-of-r"><a href="#To-implement-a-person’s-movement-within-a-circular-area-centered-on-themselves-with-a-radius-of-r" class="headerlink" title="To implement a person’s movement within a circular area centered on themselves with a radius of r:"></a>To implement a person’s movement within a circular area centered on themselves with a radius of r:</h3><ul><li>Assign a random number within the range [0, r] to represent the distance they will move.</li><li>mobility_range &#x3D; self.random.randint(0,self.mobility_range) or self.random.uniform(0, self.mobility_range)</li></ul>]]></content>
    
    
    <categories>
      
      <category>study share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ABM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/12/hello-world/"/>
    <url>/2024/11/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
